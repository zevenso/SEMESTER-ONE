EJERCICIO 4 - SEMANA 10


#include <iostream>
#include <conio.h>

using namespace std;
using namespace System;

//Luvia de caracteres donde cada caracter 
// tendra una velocidad diferente
#define N 7

void inicializarValores(int* posX, int* posY, int* dy, int* ancho, int* alto, int* color, char* forma) {
	//rand() % (max - min + 1) + min;
 
	for (int i = 0; i < N; i++) {
		ancho[i] = 1;
		alto[i] = 1;
		posY[i] = 0;
		posX[i] = rand() % ((Console::WindowWidth - ancho[i]) - 0 + 1) + 0;
		dy[i] = rand() % (3 - 1 + 1) + 1;
		color[i] = rand() % (15 - 1 + 1) + 1;
		forma[i] = rand() % ('Z' - 'A' + 1) + 'A';

	}

}

void dibujar(int* posX, int* posY, char* forma, int* color) {
	for (int i = 0; i < N; i++)
	{
		Console::ForegroundColor = ConsoleColor(color[i]);
		Console::SetCursorPosition(posX[i], posY[i]); cout << forma[i];
		Console::ResetColor();
	}

}

void borrar(int* posX, int* posY) {
	for (int i = 0; i < N; i++)
	{
		Console::SetCursorPosition(posX[i], posY[i]); cout << " ";
	}
}

void mover(int* posY, int* posX, int* dy, int* alto, int* ancho, int* color, char* forma) {
	for (int i = 0; i < N; i++)
	{
		//Si se sale del borde inferior de la consola
		if (posY[i] + alto[i] + dy[i] > Console::WindowHeight) {

			//Nueva posicion en X
			posX[i] = rand() % ((Console::WindowWidth - ancho[i]) - 0 + 1) + 0;

			//Teletransportar al inicio de la ventana
			posY[i] = 0;

			//nueva velocidad
			dy[i] = rand() % (3 - 1 + 1) + 1;

			//nuevo color
			color[i] = rand() % (15 - 1 + 1) + 1;

			//nueva forma
			forma[i] = rand() % ('Z' - 'A' + 1) + 'A';

		}

		//Moverlos en el eje y
		posY[i] += dy[i];
	}

}

void dibujarJugador(int x, int y, char forma, int color) {
	Console::ForegroundColor = ConsoleColor(color);
	Console::SetCursorPosition(x, y); cout << forma;
	Console::ResetColor();

}

void borrarJugador(int x, int y) {
	Console::SetCursorPosition(x, y); cout << " ";
}

void moverJugador(int& x, int& y, int dx, int ancho, int alto) {
	char tecla;
	//_kbhit() -> devuelve true si se presiona una tecla
	//_getch() -> devuelve el codigo ASCII de la tecla presionada
	if (_kbhit())
	{
		tecla = _getch();
		switch (tecla)

		{

			//flecha izquierda
		case 75:
			if (x - dx > 0) {
				x -= dx;

			}

			break;
			//flecha derecha
		case 77:
			if (x + dx + ancho < Console::WindowWidth) {
				x += dx;
			}
			break;
		}
	}
}

void colision(int* posX, int* posY, int* ancho, int* alto, int posXJugador, int posYJugador, int anchoJugador, int altoJugador, int& vidas) {
	for (int i = 0; i < N - 1; i++)//i -> gotas
	{
		if (!(posY[i] + alto[i] < posYJugador || posY[i] > posYJugador + altoJugador || posX[i] > posXJugador + anchoJugador || posX[i] + ancho[i] < posXJugador))
		{
			//Hay colision
			vidas--;
			break;
		}
	}

}

void dibujarCorazones(int vidas) {
	Console::SetCursorPosition(0, 0); cout << vidas << ":";
	for (int i = 2; i <= vidas + 1; i++)
	{
		Console::ForegroundColor = ConsoleColor::Red;
		Console::SetCursorPosition(i, 0); cout << (char)3;
		Console::ResetColor();
	}

}

void borraCorazones(int vidas) {
	for (int i = 2; i <= vidas + 1; i++)

	{
		Console::SetCursorPosition(i, 0); cout << " ";
	}
}

int main() {

	srand(time(NULL));
	//Posiciones en X para N caracteres
	int* posX = new int[N];
 
	//Posiciones en Y para N caracteres
	int* posY = new int[N];
 
	//Velocidad en Y para N caracteres
	int* dy = new int[N];
 
	//Ancho para N caracteres
	int* ancho = new int[N];
	//Altura para N caracteres
	int* alto = new int[N];
 
	//Color para N caracteres
	int* color = new int[N];
 
	//forma para N caracteres
	char* forma = new char[N];
 
	//Jugador
	int anchoJugador = 1;
	int altoJugador = 1;
	int posYJugador = Console::WindowHeight - altoJugador;
	int posXJugador = (Console::WindowWidth - anchoJugador) / 2;
	int dxJugador = 1;
	int colorJugador = rand() % (15 - 1 + 1) + 1;

	char formaJugador = 254;

	int vidas = 8;

	//Inicializar valores
	inicializarValores(posX, posY, dy, ancho, alto, color, forma);

	do
	{
		//dibujar
		dibujar(posX, posY, forma, color);
		dibujarJugador(posXJugador, posYJugador, formaJugador, colorJugador);
		dibujarCorazones(vidas);
		_sleep(1);
		//borrar
		borrar(posX, posY);
		borrarJugador(posXJugador, posYJugador);
		borraCorazones(vidas);

		//colision
		colision(posX, posY, ancho, alto, posXJugador, posYJugador, anchoJugador, altoJugador, vidas);

		//mover
		mover(posY, posX, dy, alto, ancho, color, forma);
		moverJugador(posXJugador, posYJugador, dxJugador, anchoJugador, altoJugador);
	} while (vidas > 0);

	return 0;

}
