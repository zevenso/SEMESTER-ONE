#include <iostream>
#include <conio.h>
using namespace std;
 
int randInt(int from, int to) {
  return rand() % (to - from + 1) + from;
}
 
int* generarCodigos(int cant) {
  int* codigos = new int[cant];
 
  for (int i = 0; i < cant; ++i) {
    codigos[i] = 201 + i;
  }
 
  return codigos;
}
 
int** generarConsumos(int cant) {
  int** consumos = new int*[cant];
 
  for (int i = 0; i < cant; ++i) {
    consumos[i] = new int[3];
    consumos[i][0] = randInt(10, 30);
    consumos[i][1] = randInt(30, 50);
    consumos[i][2] = randInt(10, 30);
  }
 
  return consumos;
}
 
void mostrarRegistros(int* codigos, int** consumos, int cant) {
  for (int i = 0; i < cant; ++i) {
    cout << "Codigo #" << codigos[i];
    cout << " -> Fijo: " << consumos[i][0];
    cout << " -> Celular: " << consumos[i][1];
    cout << " -> SMS: " << consumos[i][2] << '\n';
  }
}
 
void mostrarVendedoresConMayorCantidadMinutosCelular(int* codigos, int** consumos, int cant) {
  int maxMinutos = 0;
 
  for (int i = 0; i < cant; ++i) {
    maxMinutos = max(maxMinutos, consumos[i][1]);
  }
 
  cout << "Los vendedores con la mayor cantidad de minutos a celular son:\n";
  for (int i = 0; i < cant; ++i) {
    if (consumos[i][1] == maxMinutos) {
      cout << '\t' << codigos[i] << '\n';
    }
  }
}
 
void mostrarMontoPorExceso(int* codigos, int** consumos, int cant) {
  float montoPorExceso;
 
  for (int i = 0; i < cant; ++i) {
    montoPorExceso = 0;
 
    if (consumos[i][0] > 20) {
      montoPorExceso += (consumos[i][0] - 20) * 0.35;
    }
 
    if (consumos[i][1] > 40) {
      montoPorExceso += (consumos[i][1] - 40) * 0.45;
    }
 
    if (consumos[i][2] > 20) {
      montoPorExceso += (consumos[i][2] - 20) * 0.20;
    }
 
    // Esta linea reemplaza todo lo de arriba
    // montoPorExceso = max(0, consumos[i][0] - 20) * 0.35 + max(0, consumos[i][1] - 40) *0.45 + max(0, consumos[i][2] - 20) * 0.20;
 
    cout << "Vendedor #" << codigos[i] << " -> Monto por exceso S/." << montoPorExceso << '\n';
  }
}
 
void mostrarPromediosDeConsumos(int** consumos, int cant) {
  int sumMinFijo = 0, sumMinCel = 0, sumMensajes = 0;
 
  for (int i = 0; i < cant; ++i) {
    sumMinFijo += consumos[i][0];
    sumMinCel += consumos[i][1];
    sumMensajes += consumos[i][2];
  }
 
  cout << "Promedio de minutos fijos: " << 1.0 * sumMinFijo / cant << '\n';
  cout << "Promedio de minutos celular: " << 1.0 * sumMinCel / cant << '\n';
  cout << "Promedio de mensajes: " << 1.0 * sumMensajes / cant << '\n';
}
 
int main() {
  srand(time(0));
  
  const int CANTIDAD_VENDEDORES = 12;
 
  int* codigos = generarCodigos(CANTIDAD_VENDEDORES);
  int** consumos = generarConsumos(CANTIDAD_VENDEDORES);
 
  mostrarRegistros(codigos, consumos, CANTIDAD_VENDEDORES);
  mostrarVendedoresConMayorCantidadMinutosCelular(codigos, consumos, CANTIDAD_VENDEDORES);
  mostrarMontoPorExceso(codigos, consumos, CANTIDAD_VENDEDORES);
 
  mostrarPromediosDeConsumos(consumos, CANTIDAD_VENDEDORES);
 
  for (int i = 0; i < CANTIDAD_VENDEDORES; ++i) delete[] consumos[i];
  delete[] codigos, consumos;
  _getch();
  return 0;
}

VERSION ORDENADA:



#include <iostream>
#include <conio.h>
using namespace std;
using namespace System;
#define Cant_Vendedores 30


void Posicion(int x, int y) {
	Console::SetCursorPosition(x, y);

}

int *Generar_Codigos( ) {
	int* codigos = new int[Cant_Vendedores];
	for (int i = 0; i < Cant_Vendedores; ++i) {
		codigos[i] = 201 + i;
	}
	return codigos;
}

int** Generar_Consumos( ) {
	int** consumos = new int* [Cant_Vendedores];

	for (int i = 0; i < Cant_Vendedores; ++i) {

		consumos[i] = new int[3];

		consumos[i][0] = rand() % (30 - 1 + 1) + 1;
		consumos[i][1] = rand() % (50 - 1 + 1) + 1;
		consumos[i][2] = rand() % (30 - 1 + 1) + 1;
	}
	return consumos;
}

void Mostrar_Registros(int** consumos, int* codigos) {
	Posicion(6, 1); cout << "Codigo";
	Posicion(5, 2); cout << "Vendedor";
	Posicion(24, 1); cout << "Telefono";
	Posicion(26, 2); cout << "Fijo";
	Posicion(42, 1); cout << "Telefono";
	Posicion(43, 2); cout << "Celular";
	Posicion(60, 1); cout << "Mensajes de";
	Posicion(62, 2); cout << "Texto";
	cout << endl << endl << endl;
	for (int i = 0; i < Cant_Vendedores; ++i) {

		cout << "      # " << codigos[i] << "                 " << consumos[i][0] << "                 " << consumos[i][1] << "                 " << consumos[i][2] << endl;

	}
}


void Determinar_Tiempo_Llamadas_Celular(int** consumos, int* codigos) {

	int tiempo_maximo = 0;
	for (int i = 0; i < Cant_Vendedores; ++i) {
		//determinar maximo
		tiempo_maximo = max(tiempo_maximo, consumos[i][1]);
	}
	cout << endl << "Los vendedores con mayor cantidad de tiempo en llamada en celulares es : " << endl;
	for (int i = 0; i < Cant_Vendedores; ++i) {
		//determinar maximo
		if (consumos[i][1] == tiempo_maximo) {

			cout << "  - #" << codigos[i] << endl;
		}

	}
}

void Monto_Excesos(int** consumos, int* codigos){
	float exceso;
	cout << endl << "MONTOS POR EXCESOS DE TIEMPO " << endl;
	for (int i = 0; i < Cant_Vendedores; ++i) {
		exceso = 0;
		if (consumos[i][0] > 20) {
			exceso += (consumos[i][0] - 20) * 0.35;
		}
		if (consumos[i][1] > 40) {
			exceso += (consumos[i][1] - 40) * 0.45;
	    }
		if (consumos[i][2] > 20) {
		
			exceso += (consumos[i][2] - 20) * 0.20;
		}
		cout << "Vendedor  #" << codigos[i] << " -> Monto por exceso S/." << exceso << endl;

	}
	

}

void Promedio_Consumos(int** consumos) {
	int sumMinFijo = 0, sumMinCel = 0, sumMensajes = 0;

	for (int i = 0; i < Cant_Vendedores; ++i) {
		sumMinFijo += consumos[i][0];
		sumMinCel += consumos[i][1];
		sumMensajes += consumos[i][2];
	}
	cout << endl;
	cout << "Promedio de minutos fijos: " << 1.0 * sumMinFijo / Cant_Vendedores << '\n';
	cout << "Promedio de minutos celular: " << 1.0 * sumMinCel / Cant_Vendedores << '\n';
	cout << "Promedio de mensajes: " << 1.0 * sumMensajes / Cant_Vendedores << '\n';
}


int main() {
	srand(time(0));

	int* codigos = Generar_Codigos();
	int** consumos = Generar_Consumos();

	Mostrar_Registros(consumos, codigos);
	Determinar_Tiempo_Llamadas_Celular(consumos, codigos);
	Monto_Excesos(consumos, codigos);
	Promedio_Consumos(consumos);

_getch();
return 0;
}
